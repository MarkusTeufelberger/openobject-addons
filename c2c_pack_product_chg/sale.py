# -*- encoding: utf-8 -*-
##############################################################################
#
#    Author Joel Grand-Guillaume. Copyright Camptocamp SA
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################

import time
import netsvc
from osv import fields, osv
from mx import DateTime
from tools import config
from tools.translate import _

class sale_order_line(osv.osv):
    _inherit = 'sale.order.line'

    BASE_TEXT_FOR_PRD_REPLACE = _("""
    --
    This product has been partially or completely replaced by : 
    """)

    def invoice_line_create(self, cr, uid, ids, context={}):
        """Override this method to add a comment in the line when a product has been
        replaced in the related packing. So it'll inform the customer of the change."""
        inv_created_ids = super(sale_order_line,self).invoice_line_create(cr,uid,ids,context)
        prod_obj=self.pool.get('product.product')
        partner_obj = self.pool.get('res.partner')
        ctx ={}
        inv_line_obj = self.pool.get('account.invoice.line')
        for so_line in self.browse(cr,uid,ids):
            product_changed_id = False
            # If one of the stock move generated by the SO lines has
            # a product replaced
            for move in so_line.move_ids:
                if move.old_product_id:
                    product_changed_id = move.product_id.id
                    break
            if product_changed_id:
                if so_line.invoice_lines:
                    # We add a comment into all related invoices lines
                    concerned_inv_line_ids=[x.id for x in so_line.invoice_lines]
                    lang = partner_obj.browse(cr, uid, so_line.order_id.partner_id.id).lang
                    ctx = {'lang': lang}
                    for inv_line in inv_line_obj.browse(cr,uid,concerned_inv_line_ids):
                        current_note = inv_line.note or ''
                        product_note = prod_obj.name_get(cr, uid, [product_changed_id], context=ctx)[0][1]
                        new_note = current_note + self.BASE_TEXT_FOR_PRD_REPLACE + product_note
                        inv_line_obj.write(cr, uid, inv_line.id, {'note': new_note})
        return inv_created_ids

sale_order_line()

