msgid ""
msgstr ""
"Project-Id-Version: OpenERP Server 5.0.6\n"
"Report-Msgid-Bugs-To: support@openerp.com\n"
"POT-Creation-Date: 2009-11-27 17:29+0000\n"
"PO-Revision-Date: 2010-11-09 08:22+0000\n"
"Last-Translator: Luniz <luniz52@hotmail.com>\n"
"Language-Team: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Launchpad-Export-Date: 2012-05-10 05:29+0000\n"
"X-Generator: Launchpad (build 15213)\n"

#. module: pxgo_openoffice_reports
#: model:ir.module.module,description:pxgo_openoffice_reports.module_meta_information
msgid ""
"Pexego OpenOffice Reports - Reporting Engine based on Relatorio and "
"OpenOffice.\n"
"\n"
"Reporting engine that uses OpenOffice and Relatorio to create reports from "
"several kind of templates (like an OpenDocument Text, a Microsoft Excel "
"spreadsheet, or even a PowerPoint!) \n"
"and export them on several formats (i.e.: it may create a Microsoft Excel "
"spreadsheet from a OpenDocument spreadshet template).\n"
"\n"
"Based on Relatorio (see http://relatorio.openhex.org/), PyODConverter "
"(http://www.artofsolving.com/opensource/pyodconverter) and the Jasper "
"Reports addon from Koo (https://code.launchpad.net/openobject-client-kde).\n"
"\n"
"\n"
"*** FEATURES ***\n"
"\n"
"- The next template formats and output formats are supported:\n"
"  * Text (any text format supported by OpenOffice like odt, doc, rtf, txt): "
"\n"
"        pdf, html, odt, doc (MS Word 97), rtf, txt\n"
"  * Web (hmtl): \n"
"        pdf, odt\n"
"  * Spreadsheet (ods, xls): \n"
"        pdf, html, ods, xls (MS Excel 97), csv\n"
"  * Presentation (odp, ppt): \n"
"        pdf, html, odp, ppt\n"
"  * Drawing (odg): \n"
"        pdf, swf\n"
"\n"
"- Subreports (inserting another file anywhere on the document) are supported "
"for text formats,\n"
"  they are recursive (will be processed by the template system and may have "
"their own subreports)\n"
"  and they can be loaded from a binary field.\n"
"  \n"
"- Dynamic insertion of images is supported too, and they can be loaded from "
"a file or a binary field.\n"
"\n"
"- Conditional statements (if) and repetitive structures (for) are supported. "
"And they can be used in tables.\n"
"\n"
"\n"
"*** TEMPLATE LANGUAGE ***\n"
"\n"
"Templates are based on Relatorio and Genshi, you might find useful this "
"introduction to Relatorio: "
"http://relatorio.openhex.org/wiki/IndepthIntroduction\n"
"\n"
"Some additional features, mainly related to OpenERP, where added:\n"
"\n"
"    - Support for subreports (text documents only).\n"
"        * From OpenObject binary fields:\n"
"            ${ subreport(object.file_field, object.filename_field) }\n"
"        * From files on disk:\n"
"            ${ subreport(filepath='/tmp/something.odt') }\n"
"        * From buffers (open files, strings):\n"
"            ${ subreport(source=buffer, source_format='odt') }\n"
"\n"
"    - Translations using the OpenERP translation engine:\n"
"        ${ _(\"Object Name\") }\n"
"\n"
"    - Access to attachments of an OpenObject:\n"
"        * Get the attachment names:\n"
"            ${ ', '.join([a.name for a in get_attachments(object)]) }\n"
"        * Use the first attachment as a subreport (only text documents):\n"
"            ${ subreport(get_attachments(object)[0].datas, "
"get_attachments(object)[0].datas_fname) }\n"
"\n"
"    - Using images from fields:\n"
"        * On a frame name (see Relatorio documentation about including "
"images),\n"
"            instead of \"image: (file, mimetype)'\",\n"
"            use \"image: field_to_image(object.field)\"\n"
"\n"
"\n"
"*** REQUIREMENTS ***\n"
"\n"
"- Relatorio (0.5.0 or better) for basic templating (odt->odt and ods->ods "
"only),\n"
"- OpenOffice (3.0 or better) and PyUno for file conversions and subreports.\n"
"- Python Imaging Library (PIL) if you want to use images from binary "
"fields.\n"
"- PyCha (3.0 or better) if you want to use charts.\n"
"\n"
"        "
msgstr ""
"Relatórios OpenOffice Pexego - Motor de Relatório baseado em Relatório e "
"OpenOffice.\n"
"\n"
"Motor de Relatório que utiliza o OpenOffice e Relatório para criar "
"relatórios de vários tipos de modelos (como um Texto OpenDocument, uma folha "
"de cálculo Microsoft Excel,ou mesmo um PowerPoint!) \n"
"e exporta-os em diversos formatos (isto é: ele pode criar uma folha de "
"cálculo do Microsoft Excel a partir de um modelo de folha de cálculo "
"OpenDocument).\n"
"\n"
"Baseado no Relatório (ver http://relatorio.openhex.org/), PyODConverter "
"(http://www.artofsolving.com/opensource/pyodconverter) e Relatórios Jasper "
"do KOO (https://code.launchpad.net/openobject-client-kde).\n"
"\n"
"\n"
"*** FUNCIONALIDADES ***\n"
"\n"
"- Os próximos formatos do modelo e formatos de saída são suportados:\n"
"  * Texto (qualquer formato de texto suportado por OpenOffice como odt, doc, "
"rtf, txt): \n"
"        pdf, html, odt, doc (MS Word 97), rtf, txt\n"
"  * Web (hmtl): \n"
"        pdf, odt\n"
"  * Folha de Cálculo (ods, xls): \n"
"        pdf, html, ods, xls (MS Excel 97), csv\n"
"  * Apresentação (odp, ppt): \n"
"        pdf, html, odp, ppt\n"
"  * Desenho (odg): \n"
"        pdf, swf\n"
"\n"
"- Sub-relatórios (inserir outro arquivo em qualquer lugar sobre o documento) "
"são suportados para formatos de texto,\n"
"   são recursivos (será processado pelo sistema de modelos e poderá ter os "
"seus próprios sub-relatórios)\n"
"  e podem ser carregados a partir de um campo binário.\n"
"  \n"
"- Também é suportado a inserção dinamica de imagens, e podem ser carregados "
"apartir de um ficheiro ou um campo binário.\n"
"\n"
"- As Instruções Condicionais (se) e as estrurutas repetitivas (por) são "
"suportados. E podem ser usados em tabelas.\n"
"\n"
"\n"
"*** MODELO DE LINGUAGEM ***\n"
"\n"
"Os Modelos são baseados em Relatório Genshi,  pode achar úitl esta "
"introdução para Relatório: "
"http://relatorio.openhex.org/wiki/IndepthIntroduction\n"
"\n"
"Algumas funcionalidades adicionais,principalmente em relação com o OpenERP, "
"foram adicionadas:\n"
"\n"
"    - Suporte para sub-relatórios (somente documentos de texto).\n"
"        * A partir do campo binário OpenObject :\n"
"            ${ subrelatório(object.file_field, object.filename_field) }\n"
"        * A partir de ficheiros em disco:\n"
"            ${ subrelatório (filepath='/tmp/something.odt') }\n"
"        * A partir de buffers (abrir ficheiros, strings):\n"
"            ${ subrelatório(source=buffer, source_format='odt') }\n"
"\n"
"    - Traduções utilizando o motor da tradução OpenERP:\n"
"        ${ _(\"Nome do Objecto\") }\n"
"\n"
"    - Acesso aos anexos de um OpenObject:\n"
"        * Accesso aos anexos de um Objceto Aberto:\n"
"        * Obter os nomes dos anexos:\n"
"            ${ ', '.join([a.name for a in get_attachments(object)]) }\n"
"        * Utilize o primeiro anexo como um sub-relatório (Somente em "
"documentos de texto):\n"
"            ${ subreport(get_attachments(object)[0].datas, "
"get_attachments(object)[0].datas_fname) }\n"
"          \n"
"    - Utilizar imagens a partir de campos:\n"
"        * em um nome do quadro (ver documentos Relatório sobre a inclusão de "
"imagens),\n"
"            em vez de \"imagem: (ficheiro, mimetype)'\",\n"
"            use \"imagem: field_to_image(object.field)\"\n"
"\n"
"\n"
"*** REQUISITOS ***\n"
"\n"
"- Relatorio (0.5.0 ou melhor) para sistema de modelos básicos (odt->odt and "
"ods->ods only),\n"
"- OpenOffice (3.0 ou melhor) e PyUno para conversão de ficheiros e sub-"
"relatórios.\n"
"- Biblioteca Python Imaging (PIL) se quiser utilizar as imagens a partir de "
"campos binários.\n"
"- PyCha (3.0 ou melhor) para utilização de gráficos.\n"
"\n"
"        "

#. module: pxgo_openoffice_reports
#: model:ir.module.module,shortdesc:pxgo_openoffice_reports.module_meta_information
msgid "Pexego OpenOffice Reports"
msgstr "Relatórios OpenOffice Pexego"
